# -*- Makefile -*-
BTARGET	 = $(TARGET).byte
OTARGET	 = $(TARGET).native
BLTARGET = $(TARGET).cma
BNTARGET = $(TARGET).cmxa
STARGET	 = $(OTARGET)

#########################
## Tools configuration ##
#########################

# The flag STRICT asks Menhir to turn warnings into errors.
ifeq ($(STRICT), yes)
  MENHIR_STRICT = -yaccflag --strict
endif

# Menhir can be told to produce a parser that explains what
# it is doing.
ifeq ($(DEBUGPARSING), yes)
  MENHIROPT=-yaccflag --explain -yaccflag --trace $(MENHIR_STRICT)
else
  MENHIROPT=-yaccflag --explain $(MENHIR_STRICT)
endif

# During the development phase, we disable the warnings about unused
# variables.
OCAMLBUILDFLAGS_COMMON = -cflag "-w" -cflag "-26" -cflag "-annot"	\
				-cflag "-bin-annot" $(MENHIROPT)

# In Emacs, use classic display to enable error jumping.
TERM = $(shell echo $$TERM)
ifeq ($(TERM), dumb)
 OCAMLBUILDFLAGS = $(OCAMLBUILDFLAGS_COMMON) -tag debug -classic-display
else
 OCAMLBUILDFLAGS = $(OCAMLBUILDFLAGS_COMMON)
endif

OCAMLBUILD = ocamlbuild -use-ocamlfind -use-menhir $(OCAMLBUILDFLAGS)	\
		-docflag "-charset" -docflag "utf-8"

OCAMLDOC = ocamldoc
HEADACHE = headache

# Macros to run tests locally.
check_cmd = $(MAKE) -C tests/$(1) check
check_log_cmd = VERBOSE=1 $(call check_cmd,$(1)) > ../log/local-$(1).log
install_tests_cmd = cp examples/*.hopix examples/*.expected	\
			tests/$(1)/hopix/compiler/good

# Test suite variables.
TESTS = hopix hobix fopix retrolix mips

#########
# Rules #
#########

.PHONY: configure all-generic byte opt doc clean install uninstall	\
	headers clear byte-debug all-debug check $(TESTS) install-tests

all-generic: configure clear $(STARGET) $(TARGET)

$(TARGET):
	ln -s $(STARGET) $(TARGET)

clear:
	rm -f $(STARGET)

opt: $(OTARGET)
	@ $(OCAMLBUILD) src/$<

byte: $(BTARGET)
	@ $(OCAMLBUILD) src/$<

%:
	@ $(OCAMLBUILD) src/$@

byte-debug:
	$(OCAMLBUILD) -tag debug src/$(BTARGET)
	rm -f $(STARGET)
	ln -s $(BTARGET) $(STARGET)

ifeq ($(strip $(PREFIX)),)
install uninstall:
	@echo "Cannot (un)install $(EXECUTABLE): the PREFIX variable is undefined." && false
else
install: $(EXECUTABLE)
	mkdir -p $(PREFIX)/bin/
	install $(STARGET) $(PREFIX)/bin/$(TARGET)
uninstall:
	/bin/rm -f $(PREFIX)/bin/$(TARGET)
endif

all-debug: byte-debug $(TARGET)

# Run all the test suites locally.
check: $(TESTS)

# Run individually a test suite locally.
$(TESTS): all-debug
ifeq ($(LOG), yes)
	$(call check_log_cmd,$@)
else
	$(call check_cmd,$@)
endif

install-tests:
	$(call install_tests_cmd,hobix)
	$(call install_tests_cmd,fopix)
	$(call install_tests_cmd,retrolix)
	$(call install_tests_cmd,mips)

#######################
# Administrative part #
#######################

headers:
	for i in src/*.ml src/*.mli src/*.mly; do \
	   $(HEADACHE) -h admin/header -c admin/headache.cfg $$i; \
	done

clean:
	@ $(OCAMLBUILD) -clean
	find . -name '*~' -exec rm '{}' \;
	rm -fr *~ $(TARGET) $(TARGET).docdir/

doc: byte
	$(OCAMLBUILD) $(TARGET).docdir/index.html
