
type list ('a) = Cons ('a, list('a)) | Nil

fun map ['a] (f, l) : list('a) =
  l ?
  | Nil => Nil ['a]
  | Cons (x, xs) => Cons ['a] (f (x), map ['a] (f, xs))

fun append ['a] (l1, l2) : list('a) =
  l1 ? Nil => l2
     | Cons (x, xs) => Cons ['a] (x, append ['a] (xs, l2))

val test = map [int] (\(x) => x+1, Cons [int] (3, Nil [int]))