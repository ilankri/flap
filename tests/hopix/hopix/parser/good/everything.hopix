--    _____                              _      _____   _
--   / ____|                            | |    / ____| | |
--  | |  __   _ __    __ _   _ __     __| |   | (___   | |   __ _   _ __ ___
--  | | |_ | | '__|  / _` | | '_ \   / _` |    \___ \  | |  / _` | | '_ ` _ \
--  | |__| | | |    | (_| | | | | | | (_| |    ____) | | | | (_| | | | | | | |
--   \_____| |_|     \__,_| |_| |_|  \__,_|   |_____/  |_|  \__,_| |_| |_| |_|
--
--
-- This test file is the grand slam ("grand chelem")

{-

   If it passes, you are following the right path: all the language
   constructions have been used at least once, {- including nested
   comments -}.

-}

-------------------------------------------------------------------------------
--                                  Literals                                 --
-------------------------------------------------------------------------------

val i0 = 0
val i1 = 0xcafeCAFE
val i2 = 0XCAFEcafe
val i3 = 0o12345670
val i4 = 0O12345670
val i5 = 0b00101010
val i6 = 0B00101010
val i7 = 42

val helloworld = "\tHelloWorld\n"
val char0 = 'h'
val char1 = '\0x5A'
val char2 = '\022'
val char3 = '\''
val char4 = '\0b00110111'
val char5 = '\0o33'

-------------------------------------------------------------------------------
--                                    Types                                  --
-------------------------------------------------------------------------------

type t0 = I (int)
type t1 ('a) = K ('a)
type t2 ('a, 'b) = A ('a, 'b, 'a -> 'b)
type t3 ('a, 'b) = B ('a -> t2 ('b, t0))
type t4 ('a, 'b) = C (t2 ('a, 'b) -> t0)
type t5 ('a, 'b, 'c) = D ('a -> 'b -> 'c)
type t6 ('a, 'b, 'c) = E (('a -> 'b) -> 'c)
type t7 ('a) = F (t1 ('a))
type t8 ('a) = G (t1 ('a -> t0))

type abs0
type abs1 ('a)
type abs2 ('a, 'b, 'c, 'd)

-------------------------------------------------------------------------------
--                                    External                               --
-------------------------------------------------------------------------------
extern lemming : t8 -> t7

-------------------------------------------------------------------------------
--                                    Functions                              --
-------------------------------------------------------------------------------
fun identity_int (x : int) : int = x
fun identity_int_arrow_int (x : int -> int) : int -> int = x

fun first_int (x : int, y : int) : int = x
fun f (x : int) : int = g (x)
and g (y : int) : int = x

fun identity ['a] (x : 'a) : 'a = x
fun first ['a, 'b] (x : 'a, y : 'b) : 'a = x

-------------------------------------------------------------------------------
--                                    Constructors                           --
-------------------------------------------------------------------------------
val x = I (42)
val y = K [int] (42)
val z = A [int, int] (73, 37, \(x : int) => x)

-------------------------------------------------------------------------------
--                                   Type annotations                       --
-------------------------------------------------------------------------------
val xint = (x : t0)
val somefun = ((\(x) => x) : int -> int)
val applyfun = ((\(f, x) => f (x)) : (int -> int) -> int -> int)

-------------------------------------------------------------------------------
--                                   Sequencing                              --
-------------------------------------------------------------------------------
val two_instructions =
    f (42);
    f (1)

val three_instructions =
    f (42);
    g (31);
    f (1)

-------------------------------------------------------------------------------
--                               Local definitions                           --
-------------------------------------------------------------------------------
val local_val =
    val x = 42;
    x

val local_funs =
    fun f (x) = x and g (x) = x;
    f (42)

-------------------------------------------------------------------------------
--                               Applications                                --
-------------------------------------------------------------------------------
val ft = identity[int] (42)
val firsty = first[int,int] (42, 33)
val infix = 1 + 2
val notinfix = `+ (1, 2)
fun `eats (cat, mouse) = cat
val jerry = 42
val tom = 21
val oh = tom `eats` jerry

-------------------------------------------------------------------------------
--                          Lambda-abstraction                               --
-------------------------------------------------------------------------------
val id = \['a](x : 'a) => x
val apply = \['a, 'b] (f : 'a -> 'b, x : 'a) => (f (x) : 'b)
val compose =
   \['a, 'b, 'c] (f : 'a -> 'b, g : 'b -> 'c) =>
   \(x : 'a) => (g (f (x)) : 'c)

-------------------------------------------------------------------------------
--                          If then else                                     --
-------------------------------------------------------------------------------
val if1 = \(x) => if x then f (0)
val if2 = \(x) => if x then f (0) else g (0)
val if3 = \(x) => if x then f (0) elif x then g (0)
val if4 = \(x) => if x then f (0) elif x then g (0) else g (3)
val if5 = \(x) => if x then if x then f (0) elif x then g (0) else g(4) else g (5)

-------------------------------------------------------------------------------
--                          While e { b }                                    --
-------------------------------------------------------------------------------
val while1 =
    \(x) => while x { f (0); f (1) }