# -*- Makefile -*-
.PHONY: check bad good clean all clean-silent annnounce expected
all:

FLAP_PATH = ../../../..

-include $(FLAP_PATH)/Makefile.local

FLAP = $(shell if test -f program; then cat program; else echo ""; fi)

ifeq ($(strip $(FLAP)),)
	FLAP = $(TARGET)
endif

PROGRAM = $(FLAP_PATH)/$(FLAP) $(OPTIONS)

-include ../../extension

OPTIONS=$(shell if test -f options; then cat options; else echo ""; fi)

ifeq ($(TRACE), 1)
	OPTIONS := $(OPTIONS) -V true
endif

TIMEOUT = 30

BAD_INPUTS=$(shell if pwd | grep bad 1> /dev/null; \
	     then find . -name "*.$(EXT)" | sort; fi)
BAD_OUTPUTS=$(BAD_INPUTS:.$(EXT)=.bad-output)
GOOD_INPUTS=$(shell if pwd | grep good 1> /dev/null; \
	      then find . -name "*.$(EXT)" | sort; fi)
GOOD_OUTPUTS=$(GOOD_INPUTS:.$(EXT)=.good-output)
GOOD_EXPECTED=$(GOOD_INPUTS:.$(EXT)=.expected)

clean-expected:
	@ rm --force *.expected

expected: clean-expected $(GOOD_EXPECTED)

%.expected: %.$(EXT)
	@ (timeout $(TIMEOUT) $(PROGRAM) $< > $@) ||	\
		(echo "$@ has failed."); touch $@

%.bad-output:%.$(EXT)
	@ echo TEST >> bad-counter;					 \
	(timeout $(TIMEOUT) $(PROGRAM) $< 2> $@ 1> $@ &&		 \
		echo "[ KO ]   --> " $<					 \
	" should have failed !")					 \
	 || (echo "[XFAIL] " $<; echo 'XF' >> bad-ok-counter);
	@ if [ x$$VERBOSE = x1 ]; then					 \
	echo;								 \
	echo "INPUT: ";							 \
	cat $<;								 \
	echo;								 \
	echo "OUTPUT: ";						 \
	cat $@;								 \
	echo "--------------------------------------------------------"; \
	fi

%.good-output:%.$(EXT)
	@ (echo TEST >> good-counter);					 \
	  ((timeout $(TIMEOUT) $(PROGRAM) $< 1> $@ 2> $@)		 \
	&& (tail -n1 $@ | cut -f2 -d= | tr -d [:space:] > $*.good-res)   \
	&& (diff -uwB $*.good-res $*.expected 1> /dev/null 2> /dev/null) \
	  && (echo "[ OK ]  " $<; (echo "OK $@" >> good-ok-counter)))	 \
	  || (echo "[ KO ]   --> " $<); if [ x$$VERBOSE = x1 ]; then	 \
	echo;								 \
	echo "INPUT:";							 \
	cat $<;								 \
	echo;								 \
	echo "OUTPUT: ";						 \
	cat $@;								 \
	echo "EXPECTED: ";						 \
	cat $*.expected;						 \
	echo "--------------------------------------------------------"; \
	fi

clean-bad-counters:
	@ rm --force bad-ok-counter bad-counter

clean-good-counters:
	@ rm --force good-counter good-ok-counter

bad: clean-bad-counters $(BAD_OUTPUTS)
	@ echo $(BAD_INPUTS)
	@ touch bad-ok-counter
	@ touch bad-counter
	@ echo "BAD:  "`wc -l bad-ok-counter | cut -f1 -d' '` \
	/ `wc -l bad-counter | cut -f1 -d' '`

good: clean-good-counters $(GOOD_OUTPUTS)
	@ touch good-ok-counter
	@ touch good-counter
	@ echo "GOOD: "`wc -l good-ok-counter | cut -f1 -d' '` \
	/ `wc -l good-counter | cut -f1 -d' '`

announce:
	@ echo "========================================================";
	@ echo "In "`pwd | rev | cut -f1-3 -d/ | rev`

check: announce clean-silent good bad

clean:
	$(RM) --force *.good-output *.good-res *.bad-output *counter *~

clean-silent:
	@ $(RM) --force *.good-output *.good-res *.bad-output *counter *~
